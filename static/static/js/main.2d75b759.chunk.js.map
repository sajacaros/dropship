{"version":3,"sources":["summary/Status.js","summary/Refresh.js","summary/SummaryBoard.js","App.js","serviceWorker.js","index.js"],"names":["Status","project","status","pid","uptime","startF","stopF","updateF","className","onClick","prototype","PropTypes","string","isRequired","number","func","Refresh","refresh","nowDate","SummaryBoard","props","getSummary","a","axios","get","basicUrl","projects","data","setState","isLoading","Date","start","post","then","stop","update","state","bind","window","location","protocol","hostname","this","toLocaleString","sort","p1","p2","localeCompare","map","key","Component","App","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2d75b759.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SummaryBoard.css'\r\n\r\nfunction Status({project, status, pid, uptime, startF, stopF, updateF}) {\r\n    return ( \r\n        <div className='status'>\r\n            <span className='item'>{project}</span>\r\n            <span className='item'>{status}</span>\r\n            {\r\n                status === \"Down\" ? \r\n                <>\r\n                <span className='item'>-</span>\r\n                <span className='item'>-</span>\r\n                <button className='item' onClick={()=>startF(project)}>start</button>\r\n                </> :\r\n                <> \r\n                <span className='item'>{pid}</span>\r\n                <span className='item'>{uptime}</span>\r\n                \r\n                <button className='item' onClick={()=>stopF(project)}>stop</button>\r\n                </>\r\n            }\r\n            <button className='item' onClick={()=>updateF(project)}>update</button>\r\n        </div>\r\n        );\r\n}\r\n\r\nStatus.prototype = {\r\n    project: PropTypes.string.isRequired,\r\n    status: PropTypes.string.isRequired,\r\n    uptime: PropTypes.string,\r\n    pid: PropTypes.number,\r\n    startF: PropTypes.func.isRequired,\r\n    stopF: PropTypes.func.isRequired,\r\n    updateF: PropTypes.func.isRequired,\r\n}\r\n\r\n\r\nexport default Status;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Refresh({refresh, nowDate }) {\r\n    return ( \r\n        <div className='info'>\r\n            <span className=\"info-item\">{nowDate}</span>\r\n            <button className=\"info-item\" onClick={()=>refresh()}>refresh</button>\r\n        </div>\r\n        );\r\n}\r\n\r\nRefresh.prototype = {\r\n    refresh: PropTypes.func.isRequired,\r\n    nowDate: PropTypes.string\r\n}\r\n\r\n\r\nexport default Refresh;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Status from './Status';\r\nimport Refresh from './Refresh';\r\nimport './SummaryBoard'\r\nimport './SummaryBoard.css'\r\n\r\nclass SummaryBoard extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isLoading: true,\r\n            projects: [],\r\n            nowDate: new Date()\r\n        }\r\n\r\n        this.getSummary = this.getSummary.bind(this)\r\n        this.start = this.start.bind(this)\r\n        this.stop = this.stop.bind(this)\r\n        this.update = this.update.bind(this)\r\n        if (process.env.NODE_ENV && process.env.NODE_ENV === 'development') {\r\n            this.basicUrl = 'http://192.168.40.147:3001/dropship/api/v1';\r\n        } else {\r\n            this.basicUrl = window.location.protocol + '//'+window.location.hostname+':3001/dropship/api/v1';\r\n        }\r\n        \r\n    }\r\n\r\n    getSummary = async () => {\r\n        const {\r\n            data: {projects},\r\n        } = await axios.get(this.basicUrl + '/summary');\r\n        \r\n        this.setState({projects, isLoading: false, nowDate: new Date()});\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getSummary();\r\n    }\r\n\r\n    start = async (project) => {\r\n        await axios.post(this.basicUrl+\"/\"+project+\"/start\").then(()=>this.getSummary());\r\n    }\r\n\r\n    stop = async (project) => {\r\n        await axios.post(this.basicUrl+\"/\"+project+\"/stop\").then(()=>this.getSummary());\r\n    }\r\n\r\n    update = async (project) => {\r\n        await axios.post(this.basicUrl+\"/\"+project+\"/update\").then(()=>this.getSummary());\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        const {projects, isLoading, nowDate} = this.state\r\n\r\n        return (\r\n            <section className=\"container\">\r\n                <Refresh refresh={this.getSummary} nowDate={nowDate.toLocaleString()} />\r\n                {\r\n                    isLoading? \r\n                        (<div className=\"loader\"><span className=\"loader_text\">'Loading...'</span></div>) \r\n                        : \r\n                        (<div className=\"items\">\r\n                            {projects.sort((p1,p2)=>p1.project.localeCompare(p2.project)).map((project)=> \r\n                                (\r\n                                    <Status \r\n                                        key={project.project} \r\n                                        project={project.project} \r\n                                        status={project.status} \r\n                                        uptime={project.uptime} \r\n                                        pid={project.pid} \r\n                                        startF={this.start}\r\n                                        stopF={this.stop}\r\n                                        updateF={this.update}\r\n                                    />\r\n                                )\r\n                            )}\r\n                        </div>)\r\n                }\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SummaryBoard;","import React from 'react';\nimport './App.css';\nimport SummaryBoard from './summary/SummaryBoard'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n        <SummaryBoard />\n      </nav>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}