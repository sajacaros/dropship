{"version":3,"sources":["summary/Button.jsx","hoc/withPending.jsx","summary/Status.js","summary/Refresh.js","summary/SummaryBoard.js","App.js","serviceWorker.js","index.js"],"names":["Button","this","props","children","onPress","disabled","onClick","PureComponent","defaultProps","pendingMessage","WrappedComponent","displayName","componentName","name","wrappedComponentName","WithPending","isPending","otherProps","ButtonWithPending","withPending","Status","project","status","pid","uptime","startF","stopF","updateF","className","prototype","PropTypes","string","isRequired","number","func","bool","Refresh","refresh","nowDate","SummaryBoard","getSummary","a","doPending","axios","get","basicUrl","projects","data","setState","isLoading","Date","doIdle","start","post","then","catch","error","console","finally","stop","update","state","bind","window","location","protocol","hostname","toLocaleString","sort","p1","p2","localeCompare","map","key","Component","App","Boolean","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c8d30a28.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Button extends PureComponent {\r\n  render() {\r\n    const { children, onPress, disabled } = this.props;\r\n    return (\r\n      <button disabled={disabled} onClick={onPress}>\r\n        {children}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nButton.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  disabled: PropTypes.bool,\r\n  onPress: PropTypes.func,\r\n};\r\n\r\nButton.defaultProps = {\r\n  onPress: () => {},\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\n\r\nexport default function (pendingMessage = 'Pending') {\r\n  return function withPending(WrappedComponent) {\r\n    const { displayName, name: componentName } = WrappedComponent;\r\n    const wrappedComponentName = displayName || componentName;\r\n\r\n    function WithPending({ isPending, ...otherProps }) {\r\n      if (isPending) return pendingMessage;\r\n      return <WrappedComponent {...otherProps} />;\r\n    }\r\n\r\n    WithPending.displayName = `withLoading(${wrappedComponentName})`;\r\n    return WithPending;\r\n  };\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SummaryBoard.css';\r\nimport Button from './Button';\r\nimport withPending from '../hoc/withPending';\r\n\r\nconst ButtonWithPending = withPending(<Button disabled>pending</Button>)(Button);\r\n\r\nfunction Status({ project, status, pid, uptime, startF, stopF, updateF, isPending }) {\r\n  return (\r\n    <div className=\"status\">\r\n      <span className=\"item\">{project}</span>\r\n      <span className=\"item\">{status}</span>\r\n      {status === 'Down' ? (\r\n        <>\r\n          <span className=\"item\">-</span>\r\n          <span className=\"item\">-</span>\r\n          <ButtonWithPending isPending={isPending} className=\"item\" onPress={() => startF(project)}>\r\n            start\r\n          </ButtonWithPending>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <span className=\"item\">{pid}</span>\r\n          <span className=\"item\">{uptime}</span>\r\n\r\n          <ButtonWithPending isPending={isPending} className=\"item\" onPress={() => stopF(project)}>\r\n            stop\r\n          </ButtonWithPending>\r\n        </>\r\n      )}\r\n      <ButtonWithPending isPending={isPending} className=\"item\" onPress={() => updateF(project)}>\r\n        update\r\n      </ButtonWithPending>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatus.prototype = {\r\n  project: PropTypes.string.isRequired,\r\n  status: PropTypes.string.isRequired,\r\n  uptime: PropTypes.string,\r\n  pid: PropTypes.number,\r\n  startF: PropTypes.func.isRequired,\r\n  stopF: PropTypes.func.isRequired,\r\n  updateF: PropTypes.func.isRequired,\r\n  isPending: PropTypes.bool,\r\n};\r\n\r\nStatus.defaultProps = {\r\n  isPending: false,\r\n};\r\n\r\nexport default Status;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from './Button';\r\nimport withPending from '../hoc/withPending';\r\n\r\nconst ButtonWithPending = withPending(<Button disabled>pending</Button>)(Button);\r\n\r\nfunction Refresh({ refresh, nowDate, isPending }) {\r\n  return (\r\n    <div className=\"info\">\r\n      <span className=\"info-item\">{nowDate}</span>\r\n      <ButtonWithPending isPending={isPending} className=\"info-item\" onPress={() => refresh()}>\r\n        refresh\r\n      </ButtonWithPending>\r\n    </div>\r\n  );\r\n}\r\n\r\nRefresh.prototype = {\r\n  refresh: PropTypes.func.isRequired,\r\n  nowDate: PropTypes.string,\r\n};\r\n\r\nexport default Refresh;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Status from './Status';\r\nimport Refresh from './Refresh';\r\nimport './SummaryBoard';\r\nimport './SummaryBoard.css';\r\n\r\nclass SummaryBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: true,\r\n      isPending: false,\r\n      projects: [],\r\n      nowDate: new Date(),\r\n    };\r\n\r\n    this.getSummary = this.getSummary.bind(this);\r\n    this.start = this.start.bind(this);\r\n    this.stop = this.stop.bind(this);\r\n    this.update = this.update.bind(this);\r\n    if (process.env.NODE_ENV && process.env.NODE_ENV === 'development') {\r\n      this.basicUrl = 'http://192.168.40.147:3001/dropship/api/v1';\r\n    } else {\r\n      this.basicUrl =\r\n        window.location.protocol + '//' + window.location.hostname + ':3001/dropship/api/v1';\r\n    }\r\n  }\r\n\r\n  getSummary = async () => {\r\n    this.doPending();\r\n    const {\r\n      data: { projects },\r\n    } = await axios.get(this.basicUrl + '/summary');\r\n\r\n    this.setState({ projects, isLoading: false, nowDate: new Date() });\r\n    this.doIdle();\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getSummary();\r\n  }\r\n\r\n  doPending() {\r\n    this.setState({ isPending: true });\r\n  }\r\n\r\n  doIdle() {\r\n    this.setState({ isPending: false });\r\n  }\r\n\r\n  start = async (project) => {\r\n    this.doPending();\r\n    await axios\r\n      .post(this.basicUrl + '/' + project + '/start')\r\n      .then(() => {\r\n        this.getSummary();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      })\r\n      .finally(() => this.doIdle());\r\n  };\r\n\r\n  stop = async (project) => {\r\n    this.doPending();\r\n    await axios\r\n      .post(this.basicUrl + '/' + project + '/stop')\r\n      .then(() => this.getSummary())\r\n      .catch((error) => {\r\n        console.error(error);\r\n      })\r\n      .finally(() => this.doIdle());\r\n  };\r\n\r\n  update = async (project) => {\r\n    this.doPending();\r\n    await axios\r\n      .post(this.basicUrl + '/' + project + '/update')\r\n      .then(() => this.getSummary())\r\n      .catch((error) => {\r\n        console.error(error);\r\n      })\r\n      .finally(() => this.doIdle());\r\n  };\r\n\r\n  render() {\r\n    const { projects, isLoading, nowDate, isPending } = this.state;\r\n\r\n    return (\r\n      <section className=\"container\">\r\n        <Refresh\r\n          refresh={this.getSummary}\r\n          nowDate={nowDate.toLocaleString()}\r\n          isPending={isPending}\r\n        />\r\n        {isLoading ? (\r\n          <div className=\"loader\">\r\n            <span className=\"loader_text\">'Loading...'</span>\r\n          </div>\r\n        ) : (\r\n          <div className=\"items\">\r\n            {projects\r\n              .sort((p1, p2) => p1.project.localeCompare(p2.project))\r\n              .map((project) => (\r\n                <Status\r\n                  key={project.project}\r\n                  project={project.project}\r\n                  status={project.status}\r\n                  uptime={project.uptime}\r\n                  pid={project.pid}\r\n                  startF={this.start}\r\n                  stopF={this.stop}\r\n                  updateF={this.update}\r\n                  isPending={isPending}\r\n                />\r\n              ))}\r\n          </div>\r\n        )}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SummaryBoard;\r\n","import React from 'react';\nimport './App.css';\nimport SummaryBoard from './summary/SummaryBoard'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n        <SummaryBoard />\n      </nav>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}